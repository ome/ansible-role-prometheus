---
# tasks file for prometheus
- name: Import a key for epel
  become: true
  ansible.builtin.rpm_key:
    state: present
    key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
  when: ansible_os_family == 'RedHat'

- name: epel | setup dnf repository
  become: true
  ansible.builtin.dnf:
    update_cache: true
    name:
      https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
    state: present
  when: ansible_os_family == 'RedHat'

- name: prometheus | create directories
  become: true
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /etc/prometheus
    - /etc/prometheus/rules
    - /etc/prometheus/targets

- name: prometheus | prometheus configuration file
  become: true
  template:
    dest: /etc/prometheus/prometheus.yml
    force: true
    src: etc-prometheus-prometheus-yml.j2
    mode: 0644
  register: prometheus_configuration

- name: prometheus | prometheus alert rules
  become: true
  template:
    dest: /etc/prometheus/rules/default-alert.rules.yml
    force: true
    src: etc-prometheus-default-alert-rules-yml.j2
    mode: 0644
  register: prometheus_alert_rules

- name: prometheus | prometheus additional alert rules
  become: true
  template:
    dest: /etc/prometheus/rules/additional-alert.rules.yml
    force: true
    src: "{{ prometheus_additional_rules_template }}"
    mode: 0644
  register: prometheus_alert_rules_additional

- name: prometheus | alertmanager configuration file
  become: true
  template:
    dest: /etc/prometheus/alertmanager.yml
    force: true
    src: etc-prometheus-alertmanager-yml.j2
    mode: 0644
  register: prometheus_alertmanager_configuration

- name: prometheus | blackbox configuration file
  become: true
  copy:
    dest: /etc/prometheus/blackbox-exporter.yml
    force: true
    src: etc-prometheus-blackbox-exporter.yml
    mode: 0644
  register: prometheus_blackboxexporter_configuration

- name: prometheus | file sd configs
  become: true
  template:
    dest: /etc/prometheus/targets/{{ item.groupname }}.yml
    force: true
    src: file_sd_config-template-yml.j2
    mode: 0644
  with_items:
    - "{{ prometheus_sd_targets }}"

# Docker containers

- name: prometheus | docker-python
  become: true
  yum:
    name: python3-docker
    state: present

- name: prometheus | docker network
  become: true
  docker_network:
    name: "{{ prometheus_docker_network }}"
    state: present

- name: prometheus | docker alertmanager
  become: true
  docker_container:
    command: >
      --config.file=/etc/prometheus/alertmanager.yml
      --storage.path=/alertmanager
      {{ prometheus_alertmanager_additional_command_args }}
    image: prom/alertmanager:v{{ prometheus_alertmanager_version }}
    name: alertmanager
    networks:
      - name: "{{ prometheus_docker_network }}"
    published_ports: >-
      {{ (prometheus_alertmanager_port > 0) |
         ternary([(prometheus_alertmanager_port | string) + ':9093'], []) }}
    # read_only: True
    recreate: "{{ prometheus_alertmanager_configuration.changed }}"
    restart_policy: always
    state: started
    volumes:
      - /etc/prometheus/alertmanager.yml:/etc/prometheus/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
  register: _alertmanager_container

- name: prometheus | docker blackbox-exporter
  become: true
  docker_container:
    command: "--config.file=/etc/prometheus/blackbox-exporter.yml"
    image: prom/blackbox-exporter:v{{ prometheus_blackboxexporter_version }}
    name: blackbox-exporter
    networks:
      - name: "{{ prometheus_docker_network }}"
    published_ports: >-
      {{ (prometheus_blackboxexporter_port > 0) |
         ternary([(prometheus_blackboxexporter_port | string) + ':9115'],
         []) }}
    # read_only: True
    recreate: "{{ prometheus_blackboxexporter_configuration.changed }}"
    restart_policy: always
    state: started
    volumes:
      - /etc/prometheus/blackbox-exporter.yml:/etc/prometheus/blackbox-exporter.yml:ro
  register: _blackboxexporter_container

- name: prometheus | docker prometheus
  become: true
  docker_container:
    command: >
      --config.file=/etc/prometheus/prometheus.yml
      --storage.tsdb.path=/prometheus
      --web.console.libraries=/usr/share/prometheus/console_libraries
      --web.console.templates=/usr/share/prometheus/consoles
      {{ prometheus_additional_command_args }}
    image: prom/prometheus:v{{ prometheus_version }}
    name: prometheus
    networks:
      - name: "{{ prometheus_docker_network }}"
    published_ports: >-
      {{ (prometheus_port > 0) | ternary([(prometheus_port | string) +
         ':9090'], []) }}
    # read_only: True
    recreate: >-
      {{ prometheus_configuration.changed or
         prometheus_alert_rules.changed or
         prometheus_alert_rules_additional.changed }}
    restart_policy: always
    state: started
    user: "{{ prometheus_docker_user | default(omit) }}"
    volumes:
      # We could mount /etc/prometheus instead but the Docker image contains
      # additional (optional) files
      - /etc/prometheus/rules/:/etc/prometheus/rules/:ro
      - /etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /etc/prometheus/targets/:/etc/prometheus/targets/:ro
      - "{{ prometheus_docker_data_volume }}:/prometheus"
  register: _prometheus_container

# In certain situations if a manual change means Prometheus in Docker
# auto restarted but a host mounted file wasn't present it'll be auto
# created as a directory instead of a file.
- name: prometheus | check docker host file mounts
  stat:
    path: "{{ item }}"
  with_items:
    - /etc/prometheus/alertmanager.yml
    - /etc/prometheus/blackbox-exporter.yml
    - /etc/prometheus/prometheus.yml
  register: prometheus_docker_file_mounts

- name: prometheus | assert docker host file mounts
  assert:
    that: 'item.stat.isreg'
  with_items: "{{ prometheus_docker_file_mounts.results }}"
  # This is a sanity check so use no_log to reduce the excessive log output
  # (there's nothing senstive in there)
  # The asserts will be in the same order as the previous task
  no_log: true

- name: prometheus | return container IPs
  set_fact:
    # These default() are needed because the "X.container" property is the
    # recommended way to access this information but Ansible 2.6 only has the
    # deprecated "X.ansible_facts.docker_container" property
    prometheus_internal_ip: >-
      {{
        (_prometheus_container.container | default(
           _prometheus_container.ansible_facts.docker_container)
        ).NetworkSettings.IPAddress
      }}
    prometheus_blackboxexporter_internal_ip: >-
      {{
        (_blackboxexporter_container.container | default(
           _blackboxexporter_container.ansible_facts.docker_container)
        ).NetworkSettings.IPAddress
      }}
    prometheus_alertmanager_internal_ip: >-
      {{
        (_alertmanager_container.container | default(
           _alertmanager_container.ansible_facts.docker_container)
        ).NetworkSettings.IPAddress
      }}
